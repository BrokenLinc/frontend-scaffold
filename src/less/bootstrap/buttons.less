//
// Base styles
//

.btn {
  display: inline-block;
  font-weight: @btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: @btn-border-width solid transparent;
  .button-size(@btn-padding-y, @btn-padding-x, @font-size-base, @btn-line-height, @btn-border-radius);
  .transition(@btn-transition);

  // Share hover and focus styles
  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: @btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: @btn-disabled-opacity;
    box-shadow: none;
  }

  // Opinionated: add "hand" cursor to non-disabled .btn elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    background-image: none;
    box-shadow: @btn-active-box-shadow;

    &:focus {
      box-shadow: @btn-focus-box-shadow,
                  @btn-active-box-shadow;
    }
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}


//
// Alternate buttons
//

.btn-state(primary);
.btn-state(secondary);
.btn-state(success);
.btn-state(info);
.btn-state(warning);
.btn-state(danger);
.btn-state(light);
.btn-state(dark);


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  font-weight: @font-weight-normal;
  color: @link-color;
  background-color: transparent;

  &:hover {
    color: @link-hover-color;
    text-decoration: @link-hover-decoration;
    background-color: transparent;
    border-color: transparent;
  }

  &:focus,
  &.focus {
    text-decoration: @link-hover-decoration;
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: @btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  .button-size(@btn-padding-y-lg, @btn-padding-x-lg, @font-size-lg, @btn-line-height-lg, @btn-border-radius-lg);
}

.btn-sm {
  .button-size(@btn-padding-y-sm, @btn-padding-x-sm, @font-size-sm, @btn-line-height-sm, @btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: @btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}

// Mixins

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

.button-variant(@background, @border) {
  @hover-background: darken(@background, 7.5%);
  @hover-border: darken(@border, 10%);
  @active-background: darken(@background, 10%);
  @active-border: darken(@border, 12.5%);

  color: contrast(@background);
  background: @background;
  border-color: @border;
  box-shadow: @btn-box-shadow;

  &:hover {
    color: contrast(@hover-background);
    background: @hover-background;
    border-color: @hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    box-shadow: @btn-box-shadow,
                0 0 0 @btn-focus-width fade(@border, 50%);
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: contrast(@background);
    background-color: @background;
    border-color: @border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: contrast(@active-background);
    background-color: @active-background;
    background-image: none; // Remove the gradient for the pressed/active state
    border-color: @active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: @btn-active-box-shadow,
                  0 0 0 @btn-focus-width fade(@border, 50%);
    }
  }
}

.button-outline-variant(@color) {
  @color-hover: contrast(@color);
  @active-background: @color;
  @active-border: @color;

  color: @color;
  background-color: transparent;
  background-image: none;
  border-color: @color;

  &:hover {
    color: @color-hover;
    background-color: @active-background;
    border-color: @active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 @btn-focus-width fade(@color, 50%);
  }

  &.disabled,
  &:disabled {
    color: @color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: contrast(@active-background);
    background-color: @active-background;
    border-color: @active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      & when not (@btn-active-box-shadow = none) {
        box-shadow: @btn-active-box-shadow,
                    0 0 0 @btn-focus-width fade(@color, 50%);
      }
      & when (@btn-active-box-shadow = none) {
        box-shadow: 0 0 0 @btn-focus-width fade(@color, 50%);
      }
    }
  }
}

.btn-state(@state) {
  @color: @@state;

  .btn-@{state} {
    .button-variant(@color, @color);
  }
  .btn-outline-@{state} {
    .button-outline-variant(@color);
  }
}

// Button sizes
.button-size(@padding-y, @padding-x, @font-size, @line-height, @border-radius) {
  padding: @padding-y @padding-x;
  font-size: @font-size;
  line-height: @line-height;
  // Manually declare to provide an override to the browser default
  border-radius: @border-radius;
}
